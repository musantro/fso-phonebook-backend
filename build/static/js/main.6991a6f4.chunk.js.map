{"version":3,"sources":["services/persons.js","Notification.js","App.js","reportWebVitals.js","index.js"],"names":["baseUrl","getData","request","then","response","data","axios","get","newObject","post","id","delete","changedPerson","put","Notification","message","messageType","className","Filter","props","value","onChange","PersonForm","onSubmit","value1","onChange1","type","App","useState","persons","setPersons","newName","setNewName","newNumber","setNewNumber","queryName","setQueryName","successMessage","setSuccessMessage","errorMessage","setErrorMessage","useEffect","personService","initialPersons","personsToShow","filter","p","name","toLowerCase","includes","event","target","preventDefault","Set","map","has","window","confirm","person","find","number","returnedPerson","catch","error","setTimeout","concat","onClick","r","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.6991a6f4.chunk.js","sourcesContent":["import axios from \"axios\";\r\n\r\nconst baseUrl = '/api/persons';\r\nconst getData = request => request.then(response => response.data)\r\n\r\nconst getAll = () => getData(axios.get(baseUrl))\r\nconst create = newObject => getData(axios.post(baseUrl, newObject))\r\nconst deletePerson = (id) => axios.delete(`${baseUrl}/${id}`)\r\nconst update = (id, changedPerson) => getData(axios.put(`${baseUrl}/${id}`, changedPerson))\r\n\r\n\r\n\r\nexport default {getAll, create, deletePerson, update}\r\n","export const Notification = ({ message, messageType }) => {\r\n  if (message === null || message === '') {\r\n    return null\r\n  }\r\n\r\n  return (\r\n    <div className={messageType}>\r\n      {message}\r\n    </div>\r\n  )\r\n}\r\n","import React, {useEffect, useState} from 'react'\nimport personService from \"./services/persons\";\nimport {Notification} from \"./Notification\";\n\nconst Filter = props => <div>filter shown with <input value={props.value} onChange={props.onChange}/></div>;\n\nconst PersonForm = props =>\n  <form onSubmit={props.onSubmit}>\n    <div>name: <input value={props.value} onChange={props.onChange}/></div>\n    <div>number: <input value={props.value1} onChange={props.onChange1}/></div>\n    <div>\n      <button type=\"submit\">add</button>\n    </div>\n  </form>;\n\nconst App = () => {\n  const [persons, setPersons] = useState([])\n  const [newName, setNewName] = useState('')\n  const [newNumber, setNewNumber] = useState('')\n  const [queryName, setQueryName] = useState('')\n  const [successMessage, setSuccessMessage] = useState('')\n  const [errorMessage, setErrorMessage] = useState('')\n\n\n  useEffect(() => {\n    personService.getAll().then(initialPersons => setPersons(initialPersons))\n  }, [])\n\n  const deleteHandler = (person) => () => {\n    if (window.confirm(`Delete ${person.name} ?`)){\n      personService\n        .deletePerson(person.id)\n        .then(r => {\n          setPersons(persons.filter(p => p.id !== person.id))\n        }).catch(error => {\n        setErrorMessage(\n          `the person ${person.name} was already deleted from server`\n        )\n        setTimeout(() => {\n          setErrorMessage(null)\n        }, 5000)\n        setPersons(persons.filter(p => p.name !== person.name))\n      })\n    }\n  };\n\n  const addName = (event) => {\n    event.preventDefault()\n    const names = new Set(persons.map(p => p.name))\n\n    if (names.has(newName)) {\n      if (window.confirm(`${newName} is already added to phonebook, replace the old number with a new one?`)) {\n        const person = persons.find(p => p.name === newName)\n        const changedPerson = {...person, number: newNumber}\n\n        personService\n          .update(changedPerson.id, changedPerson)\n          .then(returnedPerson => {\n            setPersons(persons.map(p => p.id !== changedPerson.id ? p : returnedPerson))\n          })\n          .catch(error => {\n            setErrorMessage(\n              `the person ${person.name} was already deleted from server`\n            )\n            setTimeout(() => {\n              setErrorMessage(null)\n            }, 5000)\n            setPersons(persons.filter(p => p.name !== changedPerson.name))\n          })\n      }\n    } else {\n      const nameObject = {\n        name: newName,\n        number: newNumber,\n      }\n      personService\n        .create(nameObject)\n        .then(returnedPerson => {\n          setSuccessMessage(\n            `Added '${returnedPerson.name}'`\n          )\n          setTimeout(() => {\n            setSuccessMessage(null)\n          }, 5000)\n          setPersons(persons.concat(returnedPerson))\n          setNewName('')\n          setNewNumber('')\n        })\n    }\n  }\n\n  const handleNameChange = (event) => {\n    setNewName(event.target.value)\n  }\n  const handlePhoneChange = (event) => {\n    setNewNumber(event.target.value)\n  }\n  const handleQueryChange = (event) => {\n    setQueryName(event.target.value)\n  }\n\n  const personsToShow = persons.filter(p => p.name.toLowerCase().includes(queryName.toLowerCase()))\n\n  return (\n    <div>\n      <h2>PhoneBook</h2>\n      <Notification message={successMessage} messageType='success'/>\n      <Notification message={errorMessage} messageType='error'/>\n      <Filter value={queryName} onChange={handleQueryChange}/>\n      <h3>add a new</h3>\n      <PersonForm onSubmit={addName} value={newName} onChange={handleNameChange} value1={newNumber}\n                  onChange1={handlePhoneChange}/>\n      <h3>Numbers</h3>\n      <div>\n        {personsToShow.map(p =>\n          <div key={p.id}>\n            {p.name} {p.number}\n            <button onClick={deleteHandler(p)}>delete</button>\n          </div>)}\n      </div>\n    </div>\n  )\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}